@{
    Layout = null;
}
<!--
     * This is the Class for Welcome page.
     * Version: 0.4
     * Author: Ruosong Chen
-->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>WelcomePage</title>
    <style>
        /* CSS styles for body, image, and welcome message */
        body {
            margin: 0;
            padding: 0;
            width: 100%;
            height: 100%;
            overflow: hidden;
            position: absolute;
            top: 0;
            left: 0;
        }

        img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            position: absolute;
            top: 0;
            left: 0;
        }

        #welcomeMessage {
            position: absolute;
            top: 50%;
            right: 30px;
            transform: translateY(-50%);
            padding: 20px;
            background-color: rgba(255, 255, 255, 0);
            border-radius: 10px;
            font-size: 70px;
            text-align: left;
            display: none;
            color: darkslategray;
            font-family: 'Lucida Handwriting', cursive;
            font-weight: bold;
        }

    </style>
</head>
<body>
    <!-- Background image -->
    <img>
    <img src="~/imagine/WelcomePageV.gif" type="image/gif">
    <div id="welcomeMessage">
        Welcome! <br>
        Enjoy Sun. Enjoy Life.
    </div>

    <script>
        // Function to execute when the window loads
        window.onload = function () {
            // Check if it's the user's first visit
            var isFirstVisit = sessionStorage.getItem("isFirstVisit");
            // If it's the first visit, show confirmation message and store in sessionStorage
            if (!isFirstVisit) {
                showConfirmation();
                sessionStorage.setItem("isFirstVisit", "true");
            }

            // Start the timer when the window loads
            var timer = setTimeout(function () {
                // After 10 seconds, show a confirmation message
                alert("If you want to use our service, you need to provide us with your location, please reopen the website and try again :)");
            }, 10000);

            // If the user interacts with the page (e.g., moves the mouse), reset the timer
            document.addEventListener("mousemove", function () {
                clearTimeout(timer);
                timer = setTimeout(function () {
                    alert("If you want to use our service, you need to provide us with your location, please reopen the website and try again :)");
                }, 10000);
            });

        };
        // Function to get weather data based on user's location
        function getWeatherData(latitude, longitude) {

            // If location data is unavailable, use default coordinates
            if (latitude == -999) {
                latitude = -37.81;
                longitude = 144.96;
            }
            // testurl: "https://api.openweathermap.org/data/3.0/onecall?lat=41.15&lon=16.85&exclude=hourly,daily&appid=d2dba7f53adbb152167188a597023027" Bari
            // testurl: "https://api.openweathermap.org/data/3.0/onecall?lat=41.54&lon=12.29&exclude=hourly,daily&appid=d2dba7f53adbb152167188a597023027" Roma
            // testurl: "https://api.openweathermap.org/data/3.0/onecall?lat=30.03&lon=31.14&exclude=hourly,daily&appid=d2dba7f53adbb152167188a597023027" Cairo
            // testurl: "https://api.openweathermap.org/data/3.0/onecall?lat=-34.60333&lon=-58.38167&exclude=hourly,daily&appid=d2dba7f53adbb152167188a597023027" Buenos Aires
            // Trueurl: "https://api.openweathermap.org/data/3.0/onecall?lat=" + latitude + "&lon=" + longitude + "&exclude=hourly,daily&appid=d2dba7f53adbb152167188a597023027"
            var apiUrl = "https://api.openweathermap.org/data/3.0/onecall?lat=" + latitude + "&lon=" + longitude + "&appid=d2dba7f53adbb152167188a597023027";
            re_geolocation(latitude, longitude);
            // Create XMLHttpRequest object
            var xhr = new XMLHttpRequest();

            // Define AJAX request
            xhr.open("GET", apiUrl, true);
            xhr.onreadystatechange = function () {
                if (xhr.readyState === 4 && xhr.status === 200) {
                    // If request is complete and successful
                    console.log("Data sent successfully!");
                    var responseData = JSON.parse(xhr.responseText);

                    // Extract required weather data
                    // Store weather data in sessionStorage
                    // Call function to send location data to backend
                    console.log(responseData.current.uvi);
                    var uvindex = responseData.current.uvi;
                    var dtValues = responseData.daily.map(function (item) {
                        return item.dt;
                    });
                    var uvValues = responseData.daily.map(function (item) {
                        return item.uvi;
                    });
                    var maxTeValues = responseData.daily.map(function (item) {
                        return item.temp.max;
                    });
                    var minTeValues = responseData.daily.map(function (item) {
                        return item.temp.min;
                    });
                    sessionStorage.setItem("apidata_day_real_location", dtValues)
                    sessionStorage.setItem("apidata_uvi_real_location", uvValues)
                    sessionStorage.setItem("apidata_maxte_real_location", maxTeValues)
                    sessionStorage.setItem("apidata_minte_real_location", minTeValues)
                    sessionStorage.setItem("apidata_uvi_for_cal", responseData.current.uvi)

                    // Call sendLocationToBackend after obtaining uvindex
                    sendLocationToBackend(latitude, longitude, uvindex);
                }
            };
            xhr.send(); // Send the request
        }


        // Function to send location data to backend
        function sendLocationToBackend(latitude, longitude, uvindex) {
            var xhr = new XMLHttpRequest();
            xhr.open("POST", "/Home/GetUserLocation", true);
            xhr.setRequestHeader("Content-Type", "application/json;charset=UTF-8");

            // Create data object with location details
            var data = JSON.stringify({
                latitude: latitude,
                longitude: longitude,
                uvindex: uvindex
            });

            // Handle response from backend
            xhr.onreadystatechange = function () {
                if (xhr.readyState === XMLHttpRequest.DONE) {
                    if (xhr.status === 200) {

                        // On success, redirect to home page after a delay
                        console.log("Location sent successfully");
                       setTimeout(function () {
                            window.location.href = '/Home/Index';
                        }, 1500);

                    } else {
                        console.error("Failed to send location");
                    }
                }
            };
            console.log(data);
            // Send location data to backend
            xhr.send(data);

        }


        // Function to show confirmation message for sharing location
        function showConfirmation() {
            // Prompt user to share location
            var result = confirm("Do you want to share your real-time location with us?");

            // If user agrees to share location
            if (result) {
                // Check if geolocation is supported by the browser
                if (navigator.geolocation) {
                    // Get current position
                    navigator.geolocation.getCurrentPosition(

                        // On success, get weather data based on user's location
                        function (position) {
                            var latitude = position.coords.latitude;
                            var longitude = position.coords.longitude;
                            getWeatherData(latitude, longitude);
                            document.getElementById("welcomeMessage").style.display = "block";
                        },
                        function (error) {
                        }
                    );
                } else {
                    // If geolocation is not supported, use default location and get weather data
                    getWeatherData(-999, -999);
                    document.getElementById("welcomeMessage").style.display = "block";
                    console.error("Geolocation is not supported by this browser.");
                }
            } else {
                // If user declines to share location, still get weather data using default location
                getWeatherData(-999, -999);
                document.getElementById("welcomeMessage").style.display = "block";
            }
        }

        function re_geolocation(latitude, longitude) {
            //

            var apiUrl = "https://api.geoapify.com/v1/geocode/reverse?lat=" + latitude + "&lon=" + longitude + "&apiKey=56e2168ece694ca2a9cffe80b6a74aaa";

            // Create XMLHttpRequest object
            var xhr = new XMLHttpRequest();

            // Define AJAX request
            xhr.open("GET", apiUrl, true);
            xhr.onreadystatechange = function () {
                if (xhr.readyState === 4 && xhr.status === 200) {
                    // If request is complete and successful
                    var responseData = JSON.parse(xhr.responseText);
                    sessionStorage.setItem("current_location_re", responseData.features[0].properties.city)
                    console.log(responseData.features[0].properties)
                }
            };
            xhr.send(); // Send the request
            }



    </script>

</body>
</html>
